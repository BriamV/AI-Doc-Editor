# ====================================
# API Keys (Required to enable respective provider)
# ====================================

# Required API Keys
ANTHROPIC_API_KEY="your_anthropic_api_key_here"       # Required: Format: sk-ant-api03-...

# Optional API Keys
PERPLEXITY_API_KEY="your_perplexity_api_key_here"     # Optional: Format: pplx-...
OPENAI_API_KEY="your_openai_api_key_here"             # Optional, for OpenAI/OpenRouter models. Format: sk-proj-...
GOOGLE_API_KEY="your_google_api_key_here"             # Optional, for Google Gemini models.
MISTRAL_API_KEY="your_mistral_key_here"               # Optional, for Mistral AI models.
XAI_API_KEY="YOUR_XAI_KEY_HERE"                       # Optional, for xAI AI models.
AZURE_OPENAI_API_KEY="your_azure_key_here"            # Optional, for Azure OpenAI models (requires endpoint in .taskmaster/config.json).
OLLAMA_API_KEY="your_ollama_api_key_here"             # Optional: For remote Ollama servers that require authentication.

# Vite Environment Variables
VITE_CUSTOM_API_ENDPOINT=
VITE_DEFAULT_API_ENDPOINT=
VITE_DEFAULT_SYSTEM_MESSAGE=
VITE_GOOGLE_CLIENT_ID=

# T-02: OAuth 2.0 + JWT Backend Configuration - PRODUCTION READY
# ====================================
# OAuth Providers Configuration
# ====================================

# Google OAuth 2.0 Configuration
# 1. Go to Google Cloud Console: https://console.cloud.google.com/
# 2. Create/select project > APIs & Services > Credentials
# 3. Create OAuth 2.0 Client ID for Web Application
# 4. Add authorized redirect URIs: http://localhost:8000/auth/google/callback (dev), https://yourdomain.com/auth/google/callback (prod)
GOOGLE_CLIENT_ID=your_google_oauth_client_id_here
GOOGLE_CLIENT_SECRET=your_google_oauth_client_secret_here

# Microsoft Azure OAuth 2.0 Configuration
# 1. Go to Azure Portal: https://portal.azure.com/
# 2. Azure Active Directory > App registrations > New registration
# 3. Add redirect URI: http://localhost:8000/auth/microsoft/callback (dev), https://yourdomain.com/auth/microsoft/callback (prod)
# 4. Certificates & secrets > New client secret
MICROSOFT_CLIENT_ID=your_microsoft_oauth_client_id_here
MICROSOFT_CLIENT_SECRET=your_microsoft_oauth_client_secret_here

# Environment Configuration (IMPORTANT: Set correctly for each environment)
ENVIRONMENT=development  # Options: development, staging, production

# Production Domain Configuration (Required for production OAuth callbacks)
# PRODUCTION_DOMAIN=https://yourdomain.com  # Uncomment and set for production

# JWT Settings (Defaults seguros para desarrollo)
SECRET_KEY=development-secret-key-change-in-production-T02-2025
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Enhanced Security Settings (T-02)
REQUIRE_HTTPS=false                    # Set to true in production
SECURITY_HEADERS_ENABLED=true          # Enable security headers
LOG_SANITIZATION_ENABLED=true          # Prevent credential exposure in logs
AUDIT_INTEGRITY_CHECKS=true            # Enable log integrity verification

# OAuth Security Enhancement
OAUTH_STATE_EXPIRE_MINUTES=10          # OAuth state parameter expiration
OAUTH_NONCE_LENGTH=32                  # Nonce length for CSRF protection
OAUTH_CALLBACK_TIMEOUT_SECONDS=300     # Max OAuth callback timeout
OAUTH_RATE_LIMIT_PER_HOUR=100          # OAuth requests per hour per IP
OAUTH_SECRET_ROTATION_DAYS=90          # Recommend secret rotation period

# Security Monitoring
SECURITY_LOG_ENABLED=true              # Enable security event logging
FAILED_AUTH_THRESHOLD=10               # Alert threshold for failed auth
INTRUSION_DETECTION_ENABLED=true       # Enable anomaly detection

# Encryption Keys (Generate new values for production)
# OAUTH_SECRETS_ENCRYPTION_KEY=          # Fernet key for encrypting secrets at rest
# AUDIT_ENCRYPTION_KEY=                   # Key for audit log encryption

# Backend API
VITE_API_BASE_URL=http://localhost:8000

# ====================================
# OAuth 2.0 Security Best Practices (Enhanced T-02):
# ====================================
# 1. NEVER commit real OAuth credentials to version control
# 2. Use different credentials for development, staging, and production
# 3. Regularly rotate OAuth client secrets (every 90 days recommended)
# 4. Configure authorized redirect URIs strictly:
#    - Development: http://localhost:8000/auth/{provider}/callback
#    - Production: https://yourdomain.com/auth/{provider}/callback
# 5. Enable OAuth consent screen configuration
# 6. Monitor OAuth usage and failed attempts (automated monitoring included)
# 7. Use HTTPS in production (required by OAuth 2.0 spec)
# 8. Keep OAuth scopes minimal (only request what you need)
# 9. Enable PKCE (Proof Key for Code Exchange) for enhanced security
# 10. Implement state parameter validation for CSRF protection
# 11. Use secure entropy for all OAuth secrets and state parameters
# 12. Enable comprehensive security logging with data sanitization
# 13. Implement rate limiting and anomaly detection
# 14. Regular security validation using validate_oauth_security.py script

# ====================================
# Security Validation Commands:
# ====================================
# Before deployment, run security validation:
# cd backend && python validate_oauth_security.py
#
# This will check:
# - OAuth credentials format and strength
# - JWT secret security and entropy
# - CORS configuration for production
# - Security headers and HTTPS enforcement
# - Logging configuration and sanitization
# - Rate limiting and monitoring setup
# - Production-specific security requirements

# ====================================
# Configuration Notes (Enhanced T-02):
# ====================================
# 1. Uncomment and fill in the API keys for the services you plan to use.
# 2. Never commit this file with real API keys to version control.
# 3. For local development, create a .env file (not tracked by git) and copy the required variables there.
# 4. OAuth credentials can also be configured via Admin UI in the application.
# 5. Set ENVIRONMENT variable correctly for each deployment environment.
# 6. Generate cryptographically secure secrets using: python -c "import secrets; print(secrets.token_urlsafe(64))"
# 7. For production deployment, follow docs/security/OAUTH-PRODUCTION-DEPLOYMENT.md
# 8. Regular security validation: python backend/validate_oauth_security.py
# 9. Monitor security events in logs/security.log and logs/audit.log
# 10. Enable security monitoring dashboard at /admin/security-dashboard
# ====================================

# ====================================
# Emergency Security Procedures:
# ====================================
# If OAuth security breach suspected:
# 1. Immediately rotate all OAuth secrets
# 2. Invalidate all active JWT tokens
# 3. Check security logs for breach timeline
# 4. Block suspicious IP addresses
# 5. Force re-authentication for all users
# 6. Review and update security configurations
# ====================================