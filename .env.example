# ====================================
# API Keys (Required to enable respective provider)
# ====================================

# Required API Keys
ANTHROPIC_API_KEY="your_anthropic_api_key_here"       # Required: Format: sk-ant-api03-...

# Optional API Keys
PERPLEXITY_API_KEY="your_perplexity_api_key_here"     # Optional: Format: pplx-...
OPENAI_API_KEY="your_openai_api_key_here"             # Optional, for OpenAI/OpenRouter models. Format: sk-proj-...
GOOGLE_API_KEY="your_google_api_key_here"             # Optional, for Google Gemini models.
MISTRAL_API_KEY="your_mistral_key_here"               # Optional, for Mistral AI models.
XAI_API_KEY="YOUR_XAI_KEY_HERE"                       # Optional, for xAI AI models.
AZURE_OPENAI_API_KEY="your_azure_key_here"            # Optional, for Azure OpenAI models (requires endpoint in .taskmaster/config.json).
OLLAMA_API_KEY="your_ollama_api_key_here"             # Optional: For remote Ollama servers that require authentication.

# Vite Environment Variables
VITE_CUSTOM_API_ENDPOINT=
VITE_DEFAULT_API_ENDPOINT=
VITE_DEFAULT_SYSTEM_MESSAGE=
VITE_GOOGLE_CLIENT_ID=

# T-02: OAuth 2.0 + JWT Backend Configuration - PRODUCTION READY
# ====================================
# OAuth Providers Configuration
# ====================================

# Google OAuth 2.0 Configuration
# 1. Go to Google Cloud Console: https://console.cloud.google.com/
# 2. Create/select project > APIs & Services > Credentials
# 3. Create OAuth 2.0 Client ID for Web Application
# 4. Add authorized redirect URIs: http://localhost:8000/auth/google/callback (dev), https://yourdomain.com/auth/google/callback (prod)
GOOGLE_CLIENT_ID=your_google_oauth_client_id_here
GOOGLE_CLIENT_SECRET=your_google_oauth_client_secret_here

# Microsoft Azure OAuth 2.0 Configuration
# 1. Go to Azure Portal: https://portal.azure.com/
# 2. Azure Active Directory > App registrations > New registration
# 3. Add redirect URI: http://localhost:8000/auth/microsoft/callback (dev), https://yourdomain.com/auth/microsoft/callback (prod)
# 4. Certificates & secrets > New client secret
MICROSOFT_CLIENT_ID=your_microsoft_oauth_client_id_here
MICROSOFT_CLIENT_SECRET=your_microsoft_oauth_client_secret_here

# Environment Configuration (IMPORTANT: Set correctly for each environment)
ENVIRONMENT=development  # Options: development, staging, production

# Production Domain Configuration (Required for production OAuth callbacks)
# PRODUCTION_DOMAIN=https://yourdomain.com  # Uncomment and set for production

# JWT Settings (Defaults seguros para desarrollo)
SECRET_KEY=development-secret-key-change-in-production-T02-2025
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Backend API
VITE_API_BASE_URL=http://localhost:8000

# ====================================
# OAuth 2.0 Security Best Practices:
# ====================================
# 1. NEVER commit real OAuth credentials to version control
# 2. Use different credentials for development, staging, and production
# 3. Regularly rotate OAuth client secrets
# 4. Configure authorized redirect URIs strictly:
#    - Development: http://localhost:8000/auth/{provider}/callback
#    - Production: https://yourdomain.com/auth/{provider}/callback
# 5. Enable OAuth consent screen configuration
# 6. Monitor OAuth usage and failed attempts
# 7. Use HTTPS in production (required by OAuth 2.0 spec)
# 8. Keep OAuth scopes minimal (only request what you need)

# ====================================
# Configuration Notes:
# ====================================
# 1. Uncomment and fill in the API keys for the services you plan to use.
# 2. Never commit this file with real API keys to version control.
# 3. For local development, create a .env file (not tracked by git) and copy the required variables there.
# 4. OAuth credentials can also be configured via Admin UI in the application.
# 5. Set ENVIRONMENT variable correctly for each deployment environment.
# ====================================