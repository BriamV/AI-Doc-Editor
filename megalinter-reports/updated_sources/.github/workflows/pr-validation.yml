name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-title-check:
    name: PR Title Validation
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: deepakputhraya/action-pr-title@master
        with:
          regex: '^(feat|fix|docs|style|refactor|test|chore)\(T-\d{2}\): .+'
          allowed_prefixes: 'feat,fix,docs,style,refactor,test,chore'
          prefix_case_sensitive: false
          min_length: 10
          max_length: 100

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest

    steps:
      - name: Check PR size
        uses: pascalgn/size-label-action@v0.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          sizes: >
            {
              "0": "XS",
              "20": "S", 
              "100": "M",
              "500": "L",
              "1000": "XL"
            }

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Checkout with full history for diff
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Resolver problemas de dependencias SSH en GitHub Actions
        run: |
          echo "üöÄ Aplicando soluci√≥n definitiva para dependencias con referencias SSH..."

          # Estrategia basada en regeneraci√≥n limpia del archivo yarn.lock
          # 1. Configurar entorno para forzar HTTPS
          export GIT_TERMINAL_PROMPT=0
          export npm_config_registry=https://registry.npmjs.org/
          export ELECTRON_GET_USE_PROXY=1
          export ELECTRON_MIRROR=https://github.com/electron/electron/releases/download/

          # 2. Configurar Git para usar HTTPS globalmente
          echo "üîß Configurando Git para usar siempre HTTPS..."
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"
          git config --global url."https://github.com/".insteadOf "git+ssh://git@github.com/"

          # 3. Preparar configuraci√≥n de NPM para CI
          echo "Creando archivo .npmrc optimizado para CI..."
          cat > .npmrc << EOL
          registry=https://registry.npmjs.org/
          @electron:registry=https://registry.npmjs.org/
          node-gyp:registry=https://registry.npmjs.org/
          strict-ssl=true
          EOL

          # 4. Limpiar cach√© de Yarn
          echo "üóëÔ∏è Limpiando cach√© de Yarn para eliminar referencias previas..."
          yarn cache clean

      - name: Install dependencies
        env:
          # Variables de entorno cr√≠ticas para la instalaci√≥n
          GIT_TERMINAL_PROMPT: '0'
          npm_config_registry: 'https://registry.npmjs.org/'
        run: |
          # Verificar si package.json o yarn.lock han sido modificados
          if git diff --name-only HEAD^ HEAD | grep -q -E "package\.json|yarn\.lock"; then
            echo "üìú Cambios detectados en package.json o yarn.lock -> regeneraci√≥n completa"
            # Regenerar yarn.lock completamente para asegurar que no haya referencias SSH
            yarn install --network-timeout 600000 --update-checksums
          else
            echo "üìú Sin cambios -> usando configuraci√≥n optimizada"
            # Usar lockfile existente pero asegur√°ndonos de que no haya problemas de autenticaci√≥n
            yarn install --network-timeout 600000
          fi

      - name: Run yarn audit
        run: yarn audit --level moderate

      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        if: github.actor != 'dependabot[bot]'
        with:
          config: >-
            p/javascript
            p/typescript
            p/react
            p/security-audit
            p/owasp-top-ten
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEMGREP_TIMEOUT: 300
          # Activar modo estricto para bloquear PR en caso de hallazgos cr√≠ticos
          SEMGREP_BASELINE_REF: '${{ github.base_ref }}'
          SEMGREP_BLOCK_ON_SEVERITY: CRITICAL
