# QA Gate - Updated to use Reusable Workflow
# T-14: CI/CD Integration Implementation according to PRD-QA CLI.md

name: QA Gate

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  qa-validation:
    name: QA System Validation
    uses: ./.github/workflows/reusable-qa.yml
    with:
      mode: auto
      report-format: both
      node-version: '20.x'

  qa-results-blocking:
    name: QA Results Processing
    runs-on: ubuntu-latest
    needs: qa-validation
    if: always()

    steps:
      - name: Process QA Results
        run: |
          echo "## üîç QA System Gate Results"
          echo "- **Status**: ${{ needs.qa-validation.outputs.qa-passed == 'true' && '‚úÖ PASSED' || '‚ùå FAILED' }}"
          echo "- **Issues Found**: ${{ needs.qa-validation.outputs.issues-found }}"
          echo "- **Mode**: Auto-detection based on context"

          # Imprimir reporte JSON si existe
          if [ -n "${{ needs.qa-validation.outputs.report-json }}" ] && [ "${{ needs.qa-validation.outputs.report-json }}" != "{}" ]; then
            echo "### Summary Report"
            echo '${{ needs.qa-validation.outputs.report-json }}' | jq . || echo "Report data available"
          fi

      - name: QA Gate Enforcement
        run: |
          if [ "${{ needs.qa-validation.outputs.qa-passed }}" != "true" ]; then
            echo "‚ùå QA Gate FAILED - Blocking workflow"
            echo "Issues found: ${{ needs.qa-validation.outputs.issues-found }}"
            echo "Review the QA report artifacts for detailed information"
            exit 1
          else
            echo "‚úÖ QA Gate PASSED - Workflow can continue"
          fi

      - name: Comment QA Results on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const qaStatus = '${{ needs.qa-validation.outputs.qa-passed }}' === 'true' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const issuesCount = '${{ needs.qa-validation.outputs.issues-found }}' || '0';
            const reportData = '${{ needs.qa-validation.outputs.report-json }}' || '{}';

            let reportDetails = '';
            try {
              if (reportData && reportData !== '{}') {
                const report = JSON.parse(reportData);
                reportDetails = `\n\n**Summary**: ${report.message || 'QA validation completed'}`;
              }
            } catch (error) {
              console.log('Error parsing report data:', error);
            }

            const comment = `## üîç QA System Results

            **Status**: ${qaStatus}
            **Issues Found**: ${issuesCount}
            **Mode**: Auto-detection based on context
            ${reportDetails}

            üìä Detailed reports available in workflow artifacts.

            *QA Gate enforced - PR blocking enabled for failed validations*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
