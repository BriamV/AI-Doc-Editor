# Docker Compose for AI-Doc-Editor Development
# Task T-01.5: Docker-compose setup

services:
  # Development service
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ai-doc-editor-dev
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true
    networks:
      - ai-doc-editor

  # Production service
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-doc-editor-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - ai-doc-editor
    profiles:
      - production

  # T-02: FastAPI backend for OAuth + JWT
  api:
    image: python:3.12-alpine
    container_name: ai-doc-editor-api
    working_dir: /app
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
    env_file:
      - .env
    command: |
      sh -c "
        pip install -r requirements.txt && 
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    networks:
      - ai-doc-editor
    profiles:
      - backend

  # Future: Vector database (Chroma)
  vectordb:
    image: chromadb/chroma:latest
    container_name: ai-doc-editor-chroma
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - ai-doc-editor
    profiles:
      - backend

networks:
  ai-doc-editor:
    driver: bridge
    name: ai-doc-editor-network

volumes:
  chroma_data:
    name: ai-doc-editor-chroma-data

# Usage:
# Development: docker-compose up app-dev
# Production:  docker-compose --profile production up app-prod  
# Full stack:  docker-compose --profile backend up