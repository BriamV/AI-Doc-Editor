openapi: 3.0.3
info:
  title: AI-Doc-Editor Backend API
  description: |
    Comprehensive API documentation for the AI-Doc-Editor backend service.

    This API provides secure document generation, management, and collaboration features
    with integrated AI capabilities, OAuth 2.0 authentication, and comprehensive audit logging.

    ## Security Features
    - OAuth 2.0 + JWT authentication
    - Role-based access control (RBAC)
    - Rate limiting and security headers
    - TLS 1.3+ encryption
    - Comprehensive audit logging
    - Key management and encryption

    ## Architecture
    - FastAPI backend with SQLAlchemy ORM
    - Pydantic models for request/response validation
    - Audit trail with WORM (Write-Once-Read-Many) compliance
    - Multi-provider OAuth integration (Google, Microsoft)

    ## Error Handling
    All endpoints return standardized error responses with appropriate HTTP status codes.
    Authentication errors return 401, authorization errors return 403, and validation errors return 422.
  version: 0.1.0
  contact:
    name: AI-Doc-Editor Team
    url: https://github.com/BriamV/AI-Doc-Editor
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.ai-doc-editor.com
    description: Production server

security:
  - BearerAuth: []

tags:
  - name: health
    description: Health monitoring and status endpoints
  - name: auth
    description: Authentication and authorization
  - name: config
    description: System configuration management
  - name: credentials
    description: User credential management
  - name: audit
    description: Audit log management (Admin only)
  - name: security
    description: Security status and monitoring

paths:
  /:
    get:
      summary: Root API endpoint
      description: Basic API information and status
      tags:
        - health
      security: []
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "AI-Doc-Editor API"
                  version:
                    type: string
                    example: "0.1.0"
                  status:
                    type: string
                    example: "running"
                  environment:
                    type: string
                    enum: [development, staging, production]
                  security_enabled:
                    type: boolean
                    example: true
                  docs:
                    type: string
                    example: "/docs"
                    description: "Available only in development"

  /api/healthz:
    get:
      summary: Simple health check
      description: Basic health status endpoint for load balancers
      tags:
        - health
      security: []
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: "ai-doc-editor-backend"
                  version:
                    type: string
                    example: "0.1.0"
                  python_version:
                    type: string
                    example: "3.11.0"
                  dependencies:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "connected"
                      auth:
                        type: string
                        example: "ready"
    head:
      summary: Health check (HEAD)
      description: HEAD request for health status
      tags:
        - health
      security: []
      responses:
        '200':
          description: Service is healthy

  /api/health:
    get:
      summary: Comprehensive health check
      description: |
        Detailed health check including external dependencies:
        - OpenAI API connectivity
        - Storage system status
        - Overall system health
      tags:
        - health
      security: []
      responses:
        '200':
          description: Comprehensive health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /api/auth/login:
    post:
      summary: Initiate OAuth 2.0 login
      description: |
        Start OAuth 2.0 authentication flow with supported providers.
        Returns authorization URL for client-side redirect.
      tags:
        - auth
      security: []
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
            enum: [google, microsoft]
          description: OAuth provider to use
      responses:
        '200':
          description: OAuth authorization URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_url:
                    type: string
                    format: uri
                    example: "https://accounts.google.com/o/oauth2/auth?..."
                  provider:
                    type: string
                    example: "google"
                  state:
                    type: string
                    example: "random_state_string"
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/callback:
    get:
      summary: OAuth callback handler
      description: |
        Handle OAuth 2.0 callback and exchange authorization code for tokens.
        Creates or updates user account and returns JWT tokens.
      tags:
        - auth
      security: []
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from OAuth provider
        - name: state
          in: query
          schema:
            type: string
          description: State parameter for CSRF protection
        - name: provider
          in: query
          schema:
            type: string
            default: google
            enum: [google, microsoft]
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/refresh:
    post:
      summary: Refresh JWT tokens
      description: Exchange refresh token for new access and refresh tokens
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Valid refresh token
              required:
                - refresh_token
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/me:
    get:
      summary: Get current user profile
      description: Retrieve authenticated user's profile and permissions
      tags:
        - auth
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  authenticated:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/config:
    get:
      summary: Get system configurations
      description: Retrieve all system configuration entries
      tags:
        - config
      responses:
        '200':
          description: List of configuration entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigEntry'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create configuration entry
      description: Create a new system configuration entry
      tags:
        - config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigEntryCreate'
      responses:
        '201':
          description: Configuration entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/user/credentials:
    get:
      summary: Get user credentials
      description: Retrieve encrypted user credentials (API keys, tokens)
      tags:
        - credentials
      responses:
        '200':
          description: User credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentialsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Store user credentials
      description: Securely store encrypted user credentials
      tags:
        - credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsRequest'
      responses:
        '200':
          description: Credentials stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentialsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/audit/logs:
    get:
      summary: Get audit logs (Admin only)
      description: |
        Retrieve filtered audit logs with pagination.
        Requires admin role for access.
      tags:
        - audit
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: action
          in: query
          schema:
            type: string
          description: Filter by action type
        - name: user_email
          in: query
          schema:
            type: string
            format: email
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
        - name: ip_address
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/audit/stats:
    get:
      summary: Get audit statistics (Admin only)
      description: Retrieve audit log statistics and metrics
      tags:
        - audit
      responses:
        '200':
          description: Audit statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogStatsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/audit/actions:
    get:
      summary: Get available audit actions (Admin only)
      description: List all available audit action types
      tags:
        - audit
      responses:
        '200':
          description: Available audit actions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["LOGIN", "LOGOUT", "CREATE_DOCUMENT", "UPDATE_DOCUMENT"]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/audit/config:
    get:
      summary: Get audit configuration (Admin only)
      description: Retrieve current audit system configuration
      tags:
        - audit
      responses:
        '200':
          description: Audit configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditConfigResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/security/status:
    get:
      summary: Security configuration status
      description: Get current security configuration and status
      tags:
        - security
      security: []
      responses:
        '200':
          description: Security status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "secure"
                  environment:
                    type: string
                    example: "production"
                  rate_limiting:
                    type: boolean
                    example: true
                  security_headers:
                    type: boolean
                    example: true
                  audit_enabled:
                    type: boolean
                    example: true
                  cors_restricted:
                    type: boolean
                    example: true
                  https_required:
                    type: boolean
                    example: true
                  debug_mode:
                    type: boolean
                    example: false

  /api/security/tls:
    get:
      summary: TLS security status
      description: Get TLS configuration and compliance information
      tags:
        - security
      security: []
      responses:
        '200':
          description: TLS security status
          content:
            application/json:
              schema:
                type: object
                properties:
                  tls_configuration:
                    type: object
                  tls_1_3_available:
                    type: boolean
                  enhanced_components_available:
                    type: boolean
                  cipher_suite_analysis:
                    type: object
                  compliance_report:
                    type: object
                  timestamp:
                    type: number
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /api/auth/callback or /api/auth/refresh

  schemas:
    HealthStatus:
      type: object
      required:
        - status
        - timestamp
        - version
        - deps
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Overall health status
        timestamp:
          type: string
          format: date-time
          description: ISO timestamp of health check
        version:
          type: string
          description: Application version
        deps:
          $ref: '#/components/schemas/HealthDependencies'

    HealthDependencies:
      type: object
      properties:
        openai:
          type: object
          description: OpenAI API status
          properties:
            status:
              type: string
              enum: [available, error, timeout, not_configured]
            response_time_ms:
              type: integer
            models_available:
              type: integer
            api_version:
              type: string
            error:
              type: string
        browser:
          type: object
          description: Browser environment status
        storage:
          type: object
          description: Storage system status
          properties:
            status:
              type: string
              enum: [available, error, not_applicable]
            type:
              type: string
            writable:
              type: boolean
            error:
              type: string

    AuthTokens:
      type: object
      required:
        - access_token
        - refresh_token
        - token_type
        - user
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          example: "bearer"
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      required:
        - email
        - name
        - provider
        - role
      properties:
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User display name
        provider:
          type: string
          enum: [google, microsoft]
          description: OAuth provider used for authentication
        role:
          type: string
          enum: [viewer, editor, admin]
          description: User role for authorization

    ConfigEntry:
      type: object
      required:
        - id
        - key
        - value
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          description: Configuration entry ID
        key:
          type: string
          description: Configuration key
        value:
          type: string
          description: Configuration value
        description:
          type: string
          description: Configuration description
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ConfigEntryCreate:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          description: Configuration key
        value:
          type: string
          description: Configuration value
        description:
          type: string
          description: Configuration description

    UserCredentialsRequest:
      type: object
      required:
        - credentials
      properties:
        credentials:
          type: object
          description: Encrypted user credentials
          additionalProperties:
            type: string

    UserCredentialsResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
        credentials:
          type: object
          description: Encrypted credentials (only for GET requests)
          additionalProperties:
            type: string

    AuditLogListResponse:
      type: object
      required:
        - logs
        - total
        - limit
        - offset
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        total:
          type: integer
          description: Total number of audit logs
        limit:
          type: integer
          description: Number of logs per page
        offset:
          type: integer
          description: Offset for pagination
        has_more:
          type: boolean
          description: Whether more logs are available

    AuditLog:
      type: object
      required:
        - id
        - action
        - user_email
        - timestamp
        - ip_address
      properties:
        id:
          type: integer
          description: Audit log ID
        action:
          type: string
          description: Action performed
        user_email:
          type: string
          format: email
          description: User who performed the action
        timestamp:
          type: string
          format: date-time
          description: When the action occurred
        ip_address:
          type: string
          description: IP address of the user
        resource_type:
          type: string
          description: Type of resource affected
        resource_id:
          type: string
          description: ID of the resource affected
        details:
          type: object
          description: Additional action details
        severity:
          type: string
          enum: [INFO, WARNING, ERROR, CRITICAL]

    AuditLogStatsResponse:
      type: object
      required:
        - total_logs
        - date_range
        - top_actions
        - top_users
      properties:
        total_logs:
          type: integer
        date_range:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        top_actions:
          type: array
          items:
            type: object
            properties:
              action:
                type: string
              count:
                type: integer
        top_users:
          type: array
          items:
            type: object
            properties:
              user_email:
                type: string
              count:
                type: integer
        actions_by_day:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer

    AuditConfigResponse:
      type: object
      required:
        - enabled
        - retention_days
        - rate_limit_enabled
      properties:
        enabled:
          type: boolean
          description: Whether audit logging is enabled
        retention_days:
          type: integer
          description: Number of days to retain audit logs
        rate_limit_enabled:
          type: boolean
          description: Whether rate limiting is enabled
        security_headers:
          type: boolean
          description: Whether security headers are enabled
        log_level:
          type: string
          enum: [DEBUG, INFO, WARNING, ERROR, CRITICAL]

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time

    ValidationError:
      type: object
      required:
        - error
        - message
        - details
      properties:
        error:
          type: string
          example: "validation_error"
        message:
          type: string
          example: "Request validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              type:
                type: string

  responses:
    BadRequest:
      description: Bad request - invalid parameters or request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "bad_request"
            message: "Invalid request parameters"

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Invalid or missing authentication token"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "forbidden"
            message: "Insufficient permissions for this operation"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "Requested resource not found"

    ValidationError:
      description: Validation error - request body validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "rate_limit_exceeded"
            message: "Too many requests. Please try again later."
            retry_after: 60

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_server_error"
            message: "An unexpected error occurred"

  examples:
    HealthyResponse:
      summary: Healthy system response
      value:
        status: "healthy"
        timestamp: "2024-01-01T12:00:00Z"
        version: "0.1.0"
        deps:
          openai:
            status: "available"
            response_time_ms: 150
            models_available: 50
            api_version: "v1"
          storage:
            status: "available"
            type: "filesystem"
            writable: true

    AuthSuccessResponse:
      summary: Successful authentication
      value:
        access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type: "bearer"
        user:
          email: "user@example.com"
          name: "John Doe"
          provider: "google"
          role: "editor"