name: CI Pipeline

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Enable Corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.5.1 --activate

      - name: Checkout with full history for diff
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Resolver problemas de dependencias SSH en GitHub Actions
        run: |
          echo "🚀 Aplicando solución definitiva para dependencias con referencias SSH..."
          
          # Estrategia basada en regeneración limpia del archivo yarn.lock
          # 1. Configurar entorno para forzar HTTPS
          export GIT_TERMINAL_PROMPT=0
          export npm_config_registry=https://registry.npmjs.org/
          export ELECTRON_GET_USE_PROXY=1
          export ELECTRON_MIRROR=https://github.com/electron/electron/releases/download/
          
          # 2. Configurar Git para usar HTTPS globalmente
          echo "🔧 Configurando Git para usar siempre HTTPS..."
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"
          git config --global url."https://github.com/".insteadOf "git+ssh://git@github.com/"
          
          # 3. Preparar configuración de NPM para CI
          echo "Creando archivo .npmrc optimizado para CI..."
          cat > .npmrc << EOL
          registry=https://registry.npmjs.org/
          @electron:registry=https://registry.npmjs.org/
          node-gyp:registry=https://registry.npmjs.org/
          strict-ssl=true
          EOL
          
          # 4. Limpiar caché de Yarn
          echo "🗑️ Limpiando caché de Yarn para eliminar referencias previas..."
          yarn cache clean

      - name: Install dependencies (Yarn 4)
        env:
          # Variables de entorno críticas para la instalación
          GIT_TERMINAL_PROMPT: "0"
          npm_config_registry: "https://registry.npmjs.org/"
        run: |
          echo "📦 Installing dependencies with optimized configuration..."

          # Use immutable install for main/develop, allow updates in PRs
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "🔄 PR build - allowing lockfile updates if needed"
            yarn install --check-cache
          else
            echo "🔒 Main/develop build - immutable install"
            yarn install --immutable --check-cache
          fi

      - name: Type check
        run: yarn tsc-check

      - name: Lint check
        run: yarn lint

      - name: Format check
        run: yarn format:check

      - name: Run tests
        run: yarn test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          
      # Análisis de calidad se realiza con Semgrep en el workflow de PR

      - name: Build application
        run: yarn build

      - name: Run yarn audit (Node.js dependencies)
        run: |
          echo "🔒 Running yarn npm audit for Node.js dependencies..."
          yarn npm audit --all --recursive --severity critical || (echo "❌ Critical vulnerabilities found" && exit 1)

      - name: Setup Python for E2E Tests (Node 20 only)
        if: matrix.node-version == '20.x'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Backend for E2E Tests (Node 20 only)
        if: matrix.node-version == '20.x'
        run: |
          echo "--- Setting up Python backend for E2E tests (bootstrap) ---"
          node scripts/python-bootstrap.cjs

      - name: E2E Tests (Node 20 only)
        if: matrix.node-version == '20.x'
        run: |
          # Start backend with venv python in background
          backend/.venv/bin/python -m uvicorn app.main:app --app-dir backend --host 0.0.0.0 --port 8000 &
          # Start frontend
          yarn vite &
          # Wait for both services to be ready with timeout and retry limits
          npx wait-on http://localhost:5173 --timeout 60000 --interval 1000
          npx wait-on http://localhost:8000/api/healthz --timeout 60000 --interval 1000
          # Run E2E tests
          yarn test:e2e

  python-quality-gate:
    name: Python Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create Python virtual environment
        run: |
          echo "--- Creating virtual environment ---"
          cd backend
          python -m venv .venv
          source .venv/bin/activate
          echo "--- Installing dependencies ---"
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Python quality tools
        run: |
          cd backend
          source .venv/bin/activate
          pip install black ruff radon pylint mypy pip-audit

      - name: Python code formatting check (Black)
        run: |
          cd backend
          source .venv/bin/activate
          echo "🎨 Checking Python code formatting with Black..."
          black --check --diff --line-length=100 .

      - name: Python linting (Ruff)
        run: |
          cd backend
          source .venv/bin/activate
          echo "🔍 Running Ruff linter..."
          ruff check . --output-format=github

      - name: Python complexity analysis (Radon)
        run: |
          cd backend
          source .venv/bin/activate
          echo "📊 Analyzing code complexity with Radon..."
          radon cc . --min=B --show-complexity
          radon mi . --min=B

      - name: Python type checking (MyPy)
        run: |
          cd backend
          source .venv/bin/activate
          echo "🏷️ Type checking with MyPy..."
          mypy . --ignore-missing-imports --show-error-codes
        continue-on-error: true

      - name: Python security audit
        run: |
          cd backend
          source .venv/bin/activate
          echo "🔒 Running pip-audit for Python dependencies..."
          pip-audit --format json --output pip-audit-report.json || true

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report-${{ matrix.python-version }}
          path: backend/pip-audit-report.json

      - name: Check for vulnerabilities
        run: |
          cd backend
          # We check if the file is not empty and if the vulnerabilities array has items
          if [ -s pip-audit-report.json ] && [ "$(jq '.vulnerabilities | length' pip-audit-report.json)" -gt 0 ]; then
            echo "❌ Found vulnerabilities in Python packages. See the 'pip-audit-report' artifact for details."
            exit 1
          else
            echo "✅ No vulnerabilities found in Python packages."
          fi

      - name: Run Python tests
        run: |
          cd backend
          source .venv/bin/activate
          echo "🧪 Running Python tests..."
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        continue-on-error: true

  quality-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    needs: [quality-gate, python-quality-gate]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        env:
          GIT_TERMINAL_PROMPT: "0"
          npm_config_registry: "https://registry.npmjs.org/"
        run: |
          # Configure HTTPS for git operations
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          corepack enable
          corepack prepare yarn@4.5.1 --activate
          yarn install --immutable --check-cache

      - name: Generate coverage report
        run: yarn test:coverage

      - name: Complexity Analysis
        run: |
          echo "🔍 Code complexity analysis - placeholder"
          find src -name "*.ts" -o -name "*.tsx" | wc -l
        continue-on-error: true
