# CI Pipeline - Comprehensive Integration Testing
#
# SCOPE: Post-integration validation and deployment readiness
# TRIGGERS: Push events to main, develop, and release branches
# RESPONSIBILITIES:
#   - Comprehensive testing (E2E, integration, coverage)
#   - Security audits and dependency scanning
#   - Unified quality metrics and reporting
#   - Production deployment validation
#
# ARCHITECTURE: Complements pr-validation.yml (PR feedback)
# - NO overlap: Push events vs PR events are mutually exclusive
# - GitFlow aligned: Different validation levels per branch type

name: CI Pipeline

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [main, develop, 'release/**']
    # Comprehensive integration pipeline triggered on code integration
    # Covers: main (production), develop (active development), release branches
  workflow_dispatch:
    # Manual trigger for integration testing

jobs:
  frontend-quality-gate:
    name: Frontend Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable Corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.5.1 --activate

      - name: Checkout with full history for diff
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Resolver problemas de dependencias SSH en GitHub Actions
        run: |
          echo "🚀 Aplicando solución definitiva para dependencias con referencias SSH..."
          
          # Estrategia basada en regeneración limpia del archivo yarn.lock
          # 1. Configurar entorno para forzar HTTPS
          export GIT_TERMINAL_PROMPT=0
          export npm_config_registry=https://registry.npmjs.org/
          export ELECTRON_GET_USE_PROXY=1
          export ELECTRON_MIRROR=https://github.com/electron/electron/releases/download/
          
          # 2. Configurar Git para usar HTTPS globalmente
          echo "🔧 Configurando Git para usar siempre HTTPS..."
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"
          git config --global url."https://github.com/".insteadOf "git+ssh://git@github.com/"
          
          # 3. Preparar configuración de NPM para CI
          echo "Creando archivo .npmrc optimizado para CI..."
          cat > .npmrc << EOL
          registry=https://registry.npmjs.org/
          @electron:registry=https://registry.npmjs.org/
          node-gyp:registry=https://registry.npmjs.org/
          strict-ssl=true
          EOL
          
          # 4. Limpiar caché de Yarn
          echo "🗑️ Limpiando caché de Yarn para eliminar referencias previas..."
          yarn cache clean

      - name: Install dependencies (Yarn 4)
        env:
          # Variables de entorno críticas para la instalación
          GIT_TERMINAL_PROMPT: "0"
          npm_config_registry: "https://registry.npmjs.org/"
        run: |
          echo "📦 Installing dependencies with modern namespaced command..."

          # Use modernized repo:install command for standardized dependency management
          yarn repo:install

      - name: Type check
        run: yarn fe:typecheck

      - name: Lint check
        run: yarn fe:lint

      - name: Format check
        run: yarn fe:format:check

      - name: Frontend tests with coverage
        run: |
          echo "🧪 Running frontend tests with coverage..."
          yarn fe:test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          
      # Análisis de calidad se realiza con Semgrep en el workflow de PR

      - name: Build application (unified)
        run: |
          echo "🏗️ Building frontend and backend components..."
          yarn all:build

      - name: Comprehensive security audit
        run: |
          echo "🔒 Running comprehensive security audit (all dependencies)..."
          yarn sec:all

      - name: Setup Python for E2E Tests (Node 20 only)
        if: matrix.node-version == '20.x'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Backend for E2E Tests (Node 20 only)
        if: matrix.node-version == '20.x'
        run: |
          echo "--- Setting up Python backend for E2E tests (bootstrap) ---"
          yarn be:bootstrap

      - name: Install E2E Dependencies (Frontend + Backend)
        if: matrix.node-version == '20.x'
        run: |
          echo "📦 Installing E2E dependencies for both frontend and backend..."
          yarn e2e:install

      - name: E2E Tests (Node 20 only)
        if: matrix.node-version == '20.x'
        timeout-minutes: 8
        env:
          VITE_ENABLE_TESTING: true
        run: |
          # Set up process tracking and cleanup
          set -e
          trap 'echo "🧹 Cleaning up background processes..."; pkill -f "uvicorn\|vite" || true; exit 0' EXIT INT TERM

          # Start backend server in background using modern command
          echo "🚀 Starting backend server..."
          yarn be:dev &
          BACKEND_PID=$!

          # Start frontend with testing environment enabled using modern command
          echo "🌐 Starting frontend server with testing environment..."
          VITE_ENABLE_TESTING=true yarn fe:dev &
          FRONTEND_PID=$!

          # Wait for both services to be ready using modern command
          echo "⏳ Waiting for services to be ready..."
          yarn e2e:wait

          # Run comprehensive E2E tests (frontend + backend) with timeout
          echo "🧪 Running comprehensive E2E tests (frontend + backend) with timeout..."
          timeout 300s yarn e2e:all || {
            echo "❌ E2E tests timed out or failed"
            exit 1
          }

      - name: Upload Playwright Report (Node 20 only)
        if: matrix.node-version == '20.x' && failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  backend-quality-gate:
    name: Backend Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for namespaced commands)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Enable Corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.5.1 --activate

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Node dependencies for namespaced commands
        env:
          GIT_TERMINAL_PROMPT: "0"
          npm_config_registry: "https://registry.npmjs.org/"
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          yarn repo:install

      - name: Setup Python environment
        run: |
          echo "🐍 Setting up Python backend environment..."
          yarn be:bootstrap

      - name: Backend code formatting check
        run: |
          echo "🎨 Checking Python code formatting with namespaced command..."
          yarn be:format:check

      - name: Backend linting
        run: |
          echo "🔍 Running backend linting with namespaced command..."
          yarn be:lint

      - name: Backend complexity analysis
        run: |
          echo "📊 Analyzing backend code complexity..."
          yarn be:complexity

      - name: Backend security tests
        run: |
          echo "🛡️ Running backend security tests..."
          yarn be:test:security
        continue-on-error: true

      - name: Backend integration tests
        run: |
          echo "🔗 Running backend integration tests..."
          yarn be:test:integration
        continue-on-error: true

      - name: Backend comprehensive quality gate
        run: |
          echo "✅ Running comprehensive backend quality gate..."
          yarn be:quality

      - name: Backend security audit (dependencies)
        run: |
          echo "🔒 Running backend dependency security audit..."
          yarn sec:deps:be

      - name: Backend test coverage
        run: |
          echo "🧪 Running backend tests with coverage..."
          yarn be:test:coverage
        continue-on-error: true

      - name: Backend E2E Integration Tests (Python 3.11 only)
        if: matrix.python-version == '3.11'
        run: |
          echo "🔗 Running comprehensive backend E2E integration tests..."
          yarn e2e:be:coverage
        continue-on-error: true

      - name: Backend Security E2E Tests (Python 3.11 only)
        if: matrix.python-version == '3.11'
        run: |
          echo "🛡️ Running backend security E2E tests..."
          yarn e2e:be:security
        continue-on-error: true

  unified-quality-metrics:
    name: Unified Quality Metrics
    runs-on: ubuntu-latest
    needs: [frontend-quality-gate, backend-quality-gate]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Enable Corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.5.1 --activate

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        env:
          GIT_TERMINAL_PROMPT: "0"
          npm_config_registry: "https://registry.npmjs.org/"
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          yarn repo:install
          yarn be:bootstrap

      - name: Unified coverage reports
        run: |
          echo "📊 Generating unified frontend and backend coverage reports..."
          yarn qa:coverage

      - name: Document validation
        run: |
          echo "📚 Validating documentation placement and quality..."
          yarn docs:validate:strict

      - name: Quality gate validation
        run: |
          echo "✅ Running optimized quality gate pipeline..."
          yarn qa:gate:fast
