name: Quality Gate

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  python-security-audit:
    name: Python Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pip-audit

      - name: Run pip-audit and generate report
        id: pip-audit
        run: |
          pip-audit -r backend/requirements.txt --format json > pip-audit-report.json || true

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report-${{ matrix.python-version }}
          path: pip-audit-report.json

      - name: Check for vulnerabilities
        run: |
          if [ -s pip-audit-report.json ] && [ "$(jq '.vulnerabilities | length' pip-audit-report.json)" -gt 0 ]; then
            echo "‚ùå Found vulnerabilities in Python packages. See the 'pip-audit-report' artifact for details."
            exit 1
          else
            echo "‚úÖ No vulnerabilities found in Python packages."
          fi

  quality-gate:
    name: Strict Quality Enforcement
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: TypeScript strict compilation
        run: |
          echo "Running TypeScript strict compilation check..."
          npx tsc --noEmit --strict
          if [ $? -ne 0 ]; then
            echo "‚ùå TypeScript compilation failed - please fix type errors"
            exit 1
          fi
          echo "‚úÖ TypeScript compilation passed"

      - name: ESLint quality gate
        run: |
          echo "Running ESLint with zero tolerance for warnings..."
          yarn lint
          if [ $? -ne 0 ]; then
            echo "‚ùå ESLint failed - please fix all linting issues"
            echo "Run 'yarn lint:fix' to auto-fix some issues"
            exit 1
          fi
          echo "‚úÖ ESLint passed with zero warnings"

      - name: Prettier format check
        run: |
          echo "Checking code formatting with Prettier..."
          yarn format:check
          if [ $? -ne 0 ]; then
            echo "‚ùå Code formatting issues found"
            echo "Run 'yarn format' to fix formatting"
            exit 1
          fi
          echo "‚úÖ Code formatting is consistent"

      - name: Unit tests with coverage
        run: |
          echo "Running unit tests with coverage reporting..."
          yarn test:coverage
          if [ $? -ne 0 ]; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi
          echo "‚úÖ All unit tests passed"

      - name: Build verification
        run: |
          echo "Verifying application builds successfully..."
          yarn build
          if [ $? -ne 0 ]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          echo "‚úÖ Application builds successfully"

      - name: Quality summary
        run: |
          echo "üéâ All quality gates passed!"
          echo "‚úÖ TypeScript compilation: PASSED"
          echo "‚úÖ ESLint (zero warnings): PASSED" 
          echo "‚úÖ Prettier formatting: PASSED"
          echo "‚úÖ Unit tests: PASSED"
          echo "‚úÖ Build verification: PASSED"
