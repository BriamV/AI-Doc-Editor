name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-title-check:
    name: PR Title Validation
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: deepakputhraya/action-pr-title@master
        with:
          regex: '^(feat|fix|docs|style|refactor|test|chore)\(T-\d{2}\): .+'
          allowed_prefixes: 'feat,fix,docs,style,refactor,test,chore'
          prefix_case_sensitive: false
          min_length: 10
          max_length: 100

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest

    steps:
      - name: Check PR size
        uses: pascalgn/size-label-action@v0.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          sizes: >
            {
              "0": "XS",
              "20": "S", 
              "100": "M",
              "500": "L",
              "1000": "XL"
            }

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Checkout with full history for diff
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Configure direct dependency access (solving SSH issue)
        run: |
          echo "🚀 Configurando dependencias para entorno CI..."
          
          # 1. Aplicar configuración específica desde archivo
          echo "Copiando .npmrc.ci a .npmrc para CI..."
          cp .npmrc.ci .npmrc
          
          # 2. Reescribir URLs a nivel global (forzar https)
          echo "Configurando Git para usar HTTPS en lugar de SSH..."
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          
          # 3. Crear archivo .yarnrc temporal para forzar dependency protocols
          echo "## Configuración temporal para CI" > .yarnrc
          echo '"--install.no-lockfile" false' >> .yarnrc
          echo '"--install.pure-lockfile" false' >> .yarnrc
          
          # 4. Obtener node-gyp directamente (sin usar Git)
          # Esta línea es clave: descarga node-gyp y lo almacena localmente
          mkdir -p .node-gyp-local
          curl -sL https://github.com/nodejs/node-gyp/archive/master.tar.gz -o .node-gyp-local/node-gyp.tar.gz
          
          echo "Configuración completada. Verificando..." 
          cat .npmrc
          
          # 5. Limpiar cache para forzar descarga fresca
          echo "Limpiando cache..."
          yarn cache clean

      - name: Install dependencies
        env:
          # Bloquea cualquier prompt interactivo
          GIT_TERMINAL_PROMPT: "0"
        run: |
          # Verificar si package.json o yarn.lock han sido modificados
          if git diff --name-only HEAD^ HEAD | grep -q -E "package\.json|yarn\.lock"; then
            echo "📦 Cambios detectados en package.json o yarn.lock -> instalación limpia"
            yarn install --network-timeout 600000 --no-optional
          else
            echo "📦 Sin cambios -> lockfile congelado"
            yarn install --frozen-lockfile --no-optional
          fi

      - name: Run yarn audit
        run: yarn audit --level moderate

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        if: github.actor != 'dependabot[bot]'
        with:
          config: auto
