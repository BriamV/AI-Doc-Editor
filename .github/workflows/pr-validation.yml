name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-title-check:
    name: PR Title Validation
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: deepakputhraya/action-pr-title@master
        with:
          regex: '^(feat|fix|docs|style|refactor|test|chore)\([^)]+\): .+'
          allowed_prefixes: 'feat,fix,docs,style,refactor,test,chore'
          prefix_case_sensitive: false
          min_length: 10
          max_length: 100

  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size with fallback for large PRs
        run: |
          PR_NUMBER="${{ github.event.number }}"
          echo "Checking size for PR #$PR_NUMBER"

          # Get PR diff stats using GitHub API with error handling
          if curl -s -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
            -o pr_info.json; then

            ADDITIONS=$(jq -r '.additions' pr_info.json)
            DELETIONS=$(jq -r '.deletions' pr_info.json)
            TOTAL_CHANGES=$((ADDITIONS + DELETIONS))

            echo "‚úÖ PR Stats - Additions: $ADDITIONS, Deletions: $DELETIONS, Total: $TOTAL_CHANGES"

            # Determine size label based on total changes
            if [ $TOTAL_CHANGES -lt 20 ]; then
              SIZE_LABEL="XS"
            elif [ $TOTAL_CHANGES -lt 100 ]; then
              SIZE_LABEL="S"
            elif [ $TOTAL_CHANGES -lt 500 ]; then
              SIZE_LABEL="M"
            elif [ $TOTAL_CHANGES -lt 1000 ]; then
              SIZE_LABEL="L"
            else
              SIZE_LABEL="XL"
            fi

            echo "üìä PR Size: $SIZE_LABEL ($TOTAL_CHANGES changes)"

            # Add label using GitHub CLI
            gh pr edit $PR_NUMBER --add-label "size/$SIZE_LABEL" || true

          else
            echo "‚ö†Ô∏è Could not get PR diff stats from API (likely too large), marking as XL"
            gh pr edit $PR_NUMBER --add-label "size/XL" || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.5.1 --activate

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Checkout with full history for diff
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Resolver problemas de dependencias SSH en GitHub Actions
        run: |
          echo "üöÄ Aplicando soluci√≥n definitiva para dependencias con referencias SSH..."
          
          # Estrategia basada en regeneraci√≥n limpia del archivo yarn.lock
          # 1. Configurar entorno para forzar HTTPS
          export GIT_TERMINAL_PROMPT=0
          export npm_config_registry=https://registry.npmjs.org/
          export ELECTRON_GET_USE_PROXY=1
          export ELECTRON_MIRROR=https://github.com/electron/electron/releases/download/
          
          # 2. Configurar Git para usar HTTPS globalmente
          echo "üîß Configurando Git para usar siempre HTTPS..."
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"
          git config --global url."https://github.com/".insteadOf "git+ssh://git@github.com/"
          
          # 3. Preparar configuraci√≥n de NPM para CI
          echo "Creando archivo .npmrc optimizado para CI..."
          cat > .npmrc << EOL
          registry=https://registry.npmjs.org/
          @electron:registry=https://registry.npmjs.org/
          node-gyp:registry=https://registry.npmjs.org/
          strict-ssl=true
          EOL
          
          # 4. Limpiar cach√© de Yarn
          echo "üóëÔ∏è Limpiando cach√© de Yarn para eliminar referencias previas..."
          yarn cache clean

      - name: Install dependencies (Yarn 4)
        env:
          # Variables de entorno cr√≠ticas para la instalaci√≥n
          GIT_TERMINAL_PROMPT: "0"
          npm_config_registry: "https://registry.npmjs.org/"
        run: |
          # Verificar si package.json o yarn.lock han sido modificados
          if git diff --name-only HEAD^ HEAD | grep -q -E "package\.json|yarn\.lock"; then
            echo "üìú Cambios detectados en package.json o yarn.lock -> permitiendo actualizaci√≥n de lockfile"
            yarn install --check-cache
          else
            echo "üìú Sin cambios -> instalaci√≥n inmutable"
            yarn install --immutable --check-cache
          fi

      - name: Run yarn audit
        run: |
          echo "üîí Running yarn npm audit for security vulnerabilities..."
          yarn npm audit --all --recursive --severity moderate || {
            echo "‚ö†Ô∏è Security vulnerabilities found. Details above."
            echo "üìã Review and address critical/high vulnerabilities before production."
            exit 0
          }

      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        if: github.actor != 'dependabot[bot]'
        with:
          config: >-
            p/javascript
            p/typescript
            p/react
            p/security-audit
            p/owasp-top-ten
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEMGREP_TIMEOUT: 300
          # Activar modo estricto para bloquear PR en caso de hallazgos cr√≠ticos
          SEMGREP_BASELINE_REF: "${{ github.base_ref }}"
          SEMGREP_BLOCK_ON_SEVERITY: CRITICAL

  python-complexity-gate:
    name: Python Complexity Gate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create venv and install radon
        run: |
          python -m venv backend/.venv
          backend/.venv/bin/python -m pip install --upgrade pip
          backend/.venv/bin/pip install radon

      - name: Enforce complexity gate (<= B)
        env:
          CC_MAX_RANK: B
        run: |
          yarn be:complexity
